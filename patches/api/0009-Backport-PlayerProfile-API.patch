From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: hpfxd <me@hpfxd.com>
Date: Thu, 4 Nov 2021 13:10:13 -0400
Subject: [PATCH] Backport PlayerProfile API

Tested using a plugin built against 1.16.5 Paper API.

diff --git a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
new file mode 100644
index 0000000000000000000000000000000000000000..6da4509e5e3f07ce6fec97bd2f5836d407e9de10
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
@@ -0,0 +1,172 @@
+package com.destroystokyo.paper.profile;
+
+import java.util.Collection;
+import java.util.Set;
+import java.util.UUID;
+
+/**
+ * Represents a players profile for the game, such as UUID, Name, and textures.
+ */
+public interface PlayerProfile {
+    
+    /**
+     * @return The players name, if set
+     */
+    String getName();
+    
+    /**
+     * Sets this profiles Name
+     *
+     * @param name The new Name
+     * @return The previous Name
+     */
+    String setName(String name);
+    
+    /**
+     * @return The players unique identifier, if set
+     */
+    UUID getId();
+    
+    /**
+     * Sets this profiles UUID
+     *
+     * @param uuid The new UUID
+     * @return The previous UUID
+     */
+    UUID setId(UUID uuid);
+    
+    /**
+     * @return A Mutable set of this players properties, such as textures.
+     * Values specified here are subject to implementation details.
+     */
+    Set<ProfileProperty> getProperties();
+    
+    /**
+     * Check if the Profile has the specified property
+     * @param property Property name to check
+     * @return If the property is set
+     */
+    boolean hasProperty(String property);
+    
+    /**
+     * Sets a property. If the property already exists, the previous one will be replaced
+     * @param property Property to set.
+     */
+    void setProperty(ProfileProperty property);
+    
+    /**
+     * Sets multiple properties. If any of the set properties already exist, it will be replaced
+     * @param properties The properties to set
+     */
+    void setProperties(Collection<ProfileProperty> properties);
+    
+    /**
+     * Removes a specific property from this profile
+     * @param property The property to remove
+     * @return If a property was removed
+     */
+    boolean removeProperty(String property);
+    
+    /**
+     * Removes a specific property from this profile
+     * @param property The property to remove
+     * @return If a property was removed
+     */
+    default boolean removeProperty(ProfileProperty property) {
+        return removeProperty(property.getName());
+    }
+    
+    /**
+     * Removes all properties in the collection
+     * @param properties The properties to remove
+     * @return If any property was removed
+     */
+    default boolean removeProperties(Collection<ProfileProperty> properties) {
+        boolean removed = false;
+        for (ProfileProperty property : properties) {
+            if (removeProperty(property)) {
+                removed = true;
+            }
+        }
+        return removed;
+    }
+    
+    /**
+     * Clears all properties on this profile
+     */
+    void clearProperties();
+    
+    /**
+     * @return If the profile is now complete (has UUID and Name)
+     */
+    boolean isComplete();
+    
+    /**
+     * Like {@link #complete(boolean)} but will try only from cache, and not make network calls
+     * Does not account for textures.
+     *
+     * @return If the profile is now complete (has UUID and Name)
+     */
+    boolean completeFromCache();
+    
+    /**
+     * Like {@link #complete(boolean)} but will try only from cache, and not make network calls
+     * Does not account for textures.
+     *
+     * @param onlineMode Treat this as online mode or not
+     * @return If the profile is now complete (has UUID and Name)
+     */
+    boolean completeFromCache(boolean onlineMode);
+    
+    /**
+     * Like {@link #complete(boolean)} but will try only from cache, and not make network calls
+     * Does not account for textures.
+     *
+     * @param lookupUUID If only name is supplied, should we do a UUID lookup
+     * @param onlineMode Treat this as online mode or not
+     * @return If the profile is now complete (has UUID and Name)
+     */
+    boolean completeFromCache(boolean lookupUUID, boolean onlineMode);
+    
+    /**
+     * If this profile is not complete, then make the API call to complete it.
+     * This is a blocking operation and should be done asynchronously.
+     *
+     * This will also complete textures. If you do not want to load textures, use {{@link #complete(boolean)}}
+     * @return If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)
+     */
+    default boolean complete() {
+        return complete(true);
+    }
+    
+    /**
+     * If this profile is not complete, then make the API call to complete it.
+     * This is a blocking operation and should be done asynchronously.
+     *
+     * Optionally will also fill textures.
+     *
+     * Online mode will be automatically determined
+     * @param textures controls if we should fill the profile with texture properties
+     * @return If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)
+     */
+    boolean complete(boolean textures);
+    
+    /**
+     * If this profile is not complete, then make the API call to complete it.
+     * This is a blocking operation and should be done asynchronously.
+     *
+     * Optionally will also fill textures.
+     * @param textures controls if we should fill the profile with texture properties
+     * @param onlineMode Treat this server as online mode or not
+     * @return If the profile is now complete (has UUID and Name) (if you get rate limited, this operation may fail)
+     */
+    boolean complete(boolean textures, boolean onlineMode);
+    
+    /**
+     * Whether or not this Profile has textures associated to it
+     * @return If has a textures property
+     */
+    default boolean hasTextures() {
+        return hasProperty("textures");
+    }
+}
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
new file mode 100644
index 0000000000000000000000000000000000000000..a1c7cdb56e2cd3492a613efe4c7df58bdf31a8cb
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
@@ -0,0 +1,67 @@
+package com.destroystokyo.paper.profile;
+
+import com.google.common.base.Preconditions;
+
+import java.util.Objects;
+
+/**
+ * Represents a property on a {@link PlayerProfile}
+ */
+public class ProfileProperty {
+    private final String name;
+    private final String value;
+    private final String signature;
+    
+    public ProfileProperty(String name, String value) {
+        this(name, value, null);
+    }
+    
+    public ProfileProperty(String name, String value, String signature) {
+        this.name = Preconditions.checkNotNull(name, "ProfileProperty name can not be null");
+        this.value = Preconditions.checkNotNull(value, "ProfileProperty value can not be null");
+        this.signature = signature;
+    }
+    
+    /**
+     * @return The property name, ie "textures"
+     */
+    public String getName() {
+        return name;
+    }
+    
+    /**
+     * @return The property value, likely to be base64 encoded
+     */
+    public String getValue() {
+        return value;
+    }
+    
+    /**
+     * @return A signature from Mojang for signed properties
+     */
+    public String getSignature() {
+        return signature;
+    }
+    
+    /**
+     * @return If this property has a signature or not
+     */
+    public boolean isSigned() {
+        return this.signature != null;
+    }
+    
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+        ProfileProperty that = (ProfileProperty) o;
+        return Objects.equals(name, that.name) &&
+                Objects.equals(value, that.value) &&
+                Objects.equals(signature, that.signature);
+    }
+    
+    @Override
+    public int hashCode() {
+        return Objects.hash(name);
+    }
+}
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 8fbc82833d16138914e379fef9a38c206d9cc07b..c5a51d00b6d690213716b9bab71b4cfa8bf8af09 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -1162,6 +1162,39 @@ public final class Bukkit {
     }
     // Paper end
 
+    // PandaSpigot start - PlayerProfile API
+    /**
+     * Creates a PlayerProfile for the specified uuid, with name as null
+     * @param uuid UUID to create profile for
+     * @return A PlayerProfile object
+     */
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(UUID uuid) {
+        return server.createProfile(uuid);
+    }
+    
+    /**
+     * Creates a PlayerProfile for the specified name, with UUID as null
+     * @param name Name to create profile for
+     * @return A PlayerProfile object
+     */
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(String name) {
+        return server.createProfile(name);
+    }
+    
+    /**
+     * Creates a PlayerProfile for the specified name/uuid
+     *
+     * Both UUID and Name can not be null at same time. One must be supplied.
+     *
+     * @param uuid UUID to create profile for
+     * @param name Name to create profile for
+     * @return A PlayerProfile object
+     */
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(UUID uuid, String name) {
+        return server.createProfile(uuid, name);
+    }
+    // PandaSpigot end
+
     public static Server.Spigot spigot()
     {
         return server.spigot();
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 1b62463a1e18d7e35524e06e791d321d6b3823c0..2662f9c005ac1c7712f55e9cb264f4f07e80aea9 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -950,6 +950,33 @@ public interface Server extends PluginMessageRecipient {
     CommandMap getCommandMap();
     // Paper end
 
+    // PandaSpigot start - PlayerProfile API
+    /**
+     * Creates a PlayerProfile for the specified uuid, with name as null
+     * @param uuid UUID to create profile for
+     * @return A PlayerProfile object
+     */
+    com.destroystokyo.paper.profile.PlayerProfile createProfile(UUID uuid);
+    
+    /**
+     * Creates a PlayerProfile for the specified name, with UUID as null
+     * @param name Name to create profile for
+     * @return A PlayerProfile object
+     */
+    com.destroystokyo.paper.profile.PlayerProfile createProfile(String name);
+    
+    /**
+     * Creates a PlayerProfile for the specified name/uuid
+     *
+     * Both UUID and Name can not be null at same time. One must be supplied.
+     *
+     * @param uuid UUID to create profile for
+     * @param name Name to create profile for
+     * @return A PlayerProfile object
+     */
+    com.destroystokyo.paper.profile.PlayerProfile createProfile(UUID uuid, String name);
+    // PandaSpigot end
+
     public class Spigot
     {
         @Deprecated
diff --git a/src/main/java/org/bukkit/block/Skull.java b/src/main/java/org/bukkit/block/Skull.java
index 4f4896f843faf9659fe656ae6e54f920afa7c17a..c558ce7a2bf9be668448be0014af8cbfebb4c557 100644
--- a/src/main/java/org/bukkit/block/Skull.java
+++ b/src/main/java/org/bukkit/block/Skull.java
@@ -32,6 +32,20 @@ public interface Skull extends BlockState {
      */
     public boolean setOwner(String name);
 
+    // PandaSpigot start - PlayerProfile API
+    /**
+     * Sets this skull to use the supplied Player Profile, which can include textures already prefilled.
+     * @param profile The profile to set this Skull to use, may not be null
+     */
+    void setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile profile);
+    
+    /**
+     * If the skull has an owner, per {@link #hasOwner()}, return the owners {@link com.destroystokyo.paper.profile.PlayerProfile}
+     * @return The profile of the owner, if set
+     */
+    com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile();
+    // PandaSpigot end
+
     /**
      * Gets the rotation of the skull in the world
      *
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index d02fe560016ff38792bbf3f5cb3832d6c5636d8e..6c79c28a45156113599e181e99f30667c28a95c1 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1199,6 +1199,21 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
     // Paper - Undeprecate
     public void resetTitle();
 
+    // PandaSpigot start
+    /**
+     * Gets a copy of this players profile
+     * @return The players profile object
+     */
+    com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile();
+    
+    /**
+     * Changes the PlayerProfile for this player. This will cause this player
+     * to be reregistered to all clients that can currently see this player
+     * @param profile The new profile to use
+     */
+    void setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile profile);
+    // PandaSpigot end
+
     // Spigot start
     public class Spigot extends Entity.Spigot
     {
diff --git a/src/main/java/org/bukkit/inventory/meta/SkullMeta.java b/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
index fab311901f64c712783c5907ea80f9c07c3c54ee..8256764b6cc537414a51aa0fafd745a0407a21a1 100644
--- a/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/SkullMeta.java
@@ -32,5 +32,19 @@ public interface SkullMeta extends ItemMeta {
      */
     boolean setOwner(String owner);
 
+    // PandaSpigot start - PlayerProfile API
+    /**
+     * Sets this skull to use the supplied Player Profile, which can include textures already prefilled.
+     * @param profile The profile to set this Skull to use, or null to clear owner
+     */
+    void setPlayerProfile(com.destroystokyo.paper.profile.PlayerProfile profile);
+    
+    /**
+     * If the skull has an owner, per {@link #hasOwner()}, return the owners {@link com.destroystokyo.paper.profile.PlayerProfile}
+     * @return The profile of the owner, if set
+     */
+    com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile();
+    // PandaSpigot end
+
     SkullMeta clone();
 }
