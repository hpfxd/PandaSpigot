From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: uRyanxD <familiarodrigues123ro@gmail.com>
Date: Wed, 7 Dec 2022 18:17:11 -0300
Subject: [PATCH] Security fixes for reported book issues

This patch was made possible due to a number of backports as well as patches made by:

Co-authored-by: bob7l
Co-authored-by: RoccoDev

diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
index ae3cdaca275b1a50c5c37c3dd0021c4bd579d373..5322af4cbb29854417847992032b792a21aa0085 100644
--- a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
+++ b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
@@ -125,4 +125,12 @@ public class PandaSpigotConfig {
     @Comment("Whether player IP addresses should be logged by the server. This does not impact\n" +
         "the ability of plugins to log the IP addresses of players.")
     public boolean logPlayerIpAddresses = true;
+
+    public int maxPages = 50;
+
+    public int maxPageLenght = 256;
+
+    public int maxTitleLenght = 16;
+
+    public int maxAuthorLenght = 16;
 }
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
index ad33280bb8baab581a4ac17b5fe78022134c676b..a6480484f2c2f55e6cb4ef682c99f56d46980a0e 100644
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -167,7 +167,7 @@ public class PacketDataSerializer extends ByteBuf {
             return null;
         } else {
             this.readerIndex(i);
-            return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(2097152L));
+            return NBTCompressedStreamTools.a((DataInput) (new ByteBufInputStream(this)), new NBTReadLimiter(50000L)); // PandaSpigot - Reduce NBT Read Limiter
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 14afdc7cbb88150f4711811a06fa149c36cec8b9..3c642ce9252346a8258c6ba8378c3a83318f0b92 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -111,6 +111,7 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
     private final org.bukkit.craftbukkit.CraftServer server;
     private int lastTick = MinecraftServer.currentTick;
     private int lastDropTick = MinecraftServer.currentTick;
+    private int lastBookTick = MinecraftServer.currentTick; // PandaSpigot
     private int dropCount = 0;
     private static final int SURVIVAL_PLACE_DISTANCE_SQUARED = 6 * 6;
     private static final int CREATIVE_PLACE_DISTANCE_SQUARED = 7 * 7;
@@ -2058,6 +2059,13 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
         try { // CraftBukkit
         if ("MC|BEdit".equals(packetplayincustompayload.a())) {
+            // PandaSpigot start - Add small throttle to book edits
+            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                this.disconnect("Book edited too quickly!");
+                return;
+            }
+            this.lastBookTick = MinecraftServer.currentTick;
+            // PandaSpigot end
             packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
             try {
@@ -2091,6 +2099,13 @@ public class PlayerConnection implements PacketListenerPlayIn, IUpdatePlayerList
 
             return;
         } else if ("MC|BSign".equals(packetplayincustompayload.a())) {
+            // PandaSpigot start - Add small throttle to book edits
+            if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+                this.disconnect("Book edited too quickly!");
+                return;
+            }
+            this.lastBookTick = MinecraftServer.currentTick;
+            // PandaSpigot end
             packetdataserializer = new PacketDataSerializer(Unpooled.wrappedBuffer(packetplayincustompayload.b()));
 
             try {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 0b5ada0118f521eaca65b0fd67ebf232fa183b1a..181c24371c3cdd9e8d7465c3a2bf11b7afc2956c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -33,8 +33,12 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     static final ItemMetaKey BOOK_PAGES = new ItemMetaKey("pages");
     static final ItemMetaKey RESOLVED = new ItemMetaKey("resolved");
     static final ItemMetaKey GENERATION = new ItemMetaKey("generation");
-    static final int MAX_PAGE_LENGTH = Short.MAX_VALUE; // TODO: Check me
-    static final int MAX_TITLE_LENGTH = 0xffff;
+    // PandaSpigot start - Enforce proper limits on books
+    static final int MAX_PAGES = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().maxPages;
+    static final int MAX_PAGE_LENGTH = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().maxPageLenght;
+    static final int MAX_TITLE_LENGTH = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().maxTitleLenght;
+    static final int MAX_AUTHOR_LENGHT = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().maxAuthorLenght;
+    // PandaSpigot end
 
     protected String title;
     protected String author;
@@ -61,11 +65,11 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         super(tag);
 
         if (tag.hasKey(BOOK_TITLE.NBT)) {
-            this.title = limit( tag.getString(BOOK_TITLE.NBT), 1024 ); // Spigot
+            this.title = limit( tag.getString(BOOK_TITLE.NBT), MAX_TITLE_LENGTH ); // Spigot // PandaSpigot
         }
 
         if (tag.hasKey(BOOK_AUTHOR.NBT)) {
-            this.author = limit( tag.getString(BOOK_AUTHOR.NBT), 1024 ); // Spigot
+            this.author = limit( tag.getString(BOOK_AUTHOR.NBT), MAX_AUTHOR_LENGHT ); // Spigot // PandaSpigot
         }
 
         boolean resolved = false;
@@ -80,7 +84,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         if (tag.hasKey(BOOK_PAGES.NBT) && handlePages) {
             NBTTagList pages = tag.getList(BOOK_PAGES.NBT, 8);
 
-            for (int i = 0; i < pages.size(); i++) {
+            for (int i = 0; i < Math.min(pages.size(), MAX_PAGES); i++) { // PandaSpigot - Enforce proper limits on books
                 String page = pages.getString(i);
                 if (resolved) {
                     try {
@@ -90,7 +94,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
                         // Ignore and treat as an old book
                     }
                 }
-                addPage( limit( page, 2048 ) ); // Spigot
+                addPage( limit( page, MAX_PAGE_LENGTH ) ); // Spigot // PandaSpigot
             }
         }
     }
@@ -225,6 +229,11 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     public void addPage(final String... pages) {
         for (String page : pages) {
+            // PandaSpigot start - Enforce proper limits on books
+            if (this.pages.size() >= MAX_PAGES) {
+                return;
+            }
+            // PandaSpigot end
             if (page == null) {
                 page = "";
             } else if (page.length() > MAX_PAGE_LENGTH) {
