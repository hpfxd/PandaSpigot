From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: hpfxd <me@hpfxd.com>
Date: Fri, 18 Mar 2022 15:00:27 -0400
Subject: [PATCH] Add Channel initialization listeners


diff --git a/build.gradle.kts b/build.gradle.kts
index c885576a2313cdee439dc9be82798d363f3e8e58..7c8803f4ba837249f3a71f72d53e243b3920bd3f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -41,6 +41,8 @@ dependencies {
     implementation("org.jline:jline-terminal-jansi:3.20.0")
     // PandaSpigot end
 
+    implementation("net.kyori:adventure-key:4.10.1") // PandaSpigot - Add Channel initialization listeners
+
     testImplementation("junit:junit:4.11")
     testImplementation("org.hamcrest:hamcrest-library:1.3")
 }
diff --git a/src/main/java/io/papermc/paper/network/ChannelInitializeListener.java b/src/main/java/io/papermc/paper/network/ChannelInitializeListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..446d91366f893ea108f759f57f0abb7162043a61
--- /dev/null
+++ b/src/main/java/io/papermc/paper/network/ChannelInitializeListener.java
@@ -0,0 +1,14 @@
+package io.papermc.paper.network;
+
+import io.netty.channel.Channel;
+
+/**
+ * Internal API to register channel initialization listeners.
+ * <p>
+ * This is not officially supported API and we make no guarantees to the existence or state of this interface.
+ */
+@FunctionalInterface
+public interface ChannelInitializeListener {
+
+    void afterInitChannel(Channel channel);
+}
diff --git a/src/main/java/io/papermc/paper/network/ChannelInitializeListenerHolder.java b/src/main/java/io/papermc/paper/network/ChannelInitializeListenerHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..81bd7edb536a8da2bb88b45d7e3cd8c04e8bddf6
--- /dev/null
+++ b/src/main/java/io/papermc/paper/network/ChannelInitializeListenerHolder.java
@@ -0,0 +1,72 @@
+package io.papermc.paper.network;
+
+import io.netty.channel.Channel;
+import net.kyori.adventure.key.Key;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Internal API to register channel initialization listeners.
+ * <p>
+ * This is not officially supported API and we make no guarantees to the existence or state of this class.
+ */
+public final class ChannelInitializeListenerHolder {
+
+    private static final Map<Key, ChannelInitializeListener> LISTENERS = new HashMap<>();
+    private static final Map<Key, ChannelInitializeListener> IMMUTABLE_VIEW = Collections.unmodifiableMap(LISTENERS);
+
+    private ChannelInitializeListenerHolder() {
+    }
+
+    /**
+     * Registers whether an initialization listener is registered under the given key.
+     *
+     * @param key key
+     * @return whether an initialization listener is registered under the given key
+     */
+    public static boolean hasListener(Key key) {
+        return LISTENERS.containsKey(key);
+    }
+
+    /**
+     * Registers a channel initialization listener called after ServerConnection is initialized.
+     *
+     * @param key      key
+     * @param listener initialization listeners
+     */
+    public static void addListener(Key key, ChannelInitializeListener listener) {
+        LISTENERS.put(key, listener);
+    }
+
+    /**
+     * Removes and returns an initialization listener registered by the given key if present.
+     *
+     * @param key key
+     * @return removed initialization listener if present
+     */
+    public static ChannelInitializeListener removeListener(Key key) {
+        return LISTENERS.remove(key);
+    }
+
+    /**
+     * Returns an immutable map of registered initialization listeners.
+     *
+     * @return immutable map of registered initialization listeners
+     */
+    public static Map<Key, ChannelInitializeListener> getListeners() {
+        return IMMUTABLE_VIEW;
+    }
+
+    /**
+     * Calls the registered listeners with the given channel.
+     *
+     * @param channel channel
+     */
+    public static void callListeners(Channel channel) {
+        for (ChannelInitializeListener listener : LISTENERS.values()) {
+            listener.afterInitChannel(channel);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
index 000b2488b0806594bc2d15012c966357f4325f4a..36b5c37d5224ac4f474b5e48767e32f689f6681c 100644
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -131,6 +131,7 @@ public class ServerConnection {
                     // PandaSpigot end
                     channel.pipeline().addLast("packet_handler", networkmanager);
                     networkmanager.a((PacketListener) (new HandshakeListener(ServerConnection.this.f, networkmanager)));
+                    io.papermc.paper.network.ChannelInitializeListenerHolder.callListeners(channel); // PandaSpigot - Add Channel initialization listeners
                 }
             }).group((EventLoopGroup) lazyinitvar.c()).localAddress(address)).bind().syncUninterruptibly()); // PandaSpigot - Unix domain socket support
         }
