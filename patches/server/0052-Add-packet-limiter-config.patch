From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: hpfxd <me@hpfxd.com>
Date: Sat, 14 May 2022 18:35:58 -0400
Subject: [PATCH] Add packet limiter config

Packet limiter implementation taken from Spottedleaf's patch in Paper.

diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..4f48e331c6cfa3ed456aa772dfee787581b46c56
--- /dev/null
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -0,0 +1,9 @@
+package com.destroystokyo.paper;
+
+public class PaperConfig {
+    // Dummy PacketLimit class as ViaVersion checks for the existence of this class
+    // in order to know whether the server has a built-in packet limiter.
+    // See: https://github.com/ViaVersion/ViaVersion/blob/823eb1f3927ae01b3d4ba05c8a83ce34eaf87daf/bukkit/src/main/java/com/viaversion/viaversion/bukkit/platform/PaperViaInjector.java#L71-L73
+    public static final class PacketLimit {
+    }
+}
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PacketLimiterConfig.java b/src/main/java/com/hpfxd/pandaspigot/config/PacketLimiterConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..24d213655f038129e25bd75ce876ba68ed43105c
--- /dev/null
+++ b/src/main/java/com/hpfxd/pandaspigot/config/PacketLimiterConfig.java
@@ -0,0 +1,132 @@
+package com.hpfxd.pandaspigot.config;
+
+import net.minecraft.server.Packet;
+import org.bukkit.Bukkit;
+import org.spongepowered.configurate.ConfigurationNode;
+import org.spongepowered.configurate.serialize.SerializationException;
+import org.spongepowered.configurate.serialize.TypeSerializer;
+
+import java.lang.reflect.Type;
+import java.util.HashMap;
+import java.util.Map;
+
+public class PacketLimiterConfig {
+    private final String kickMessage;
+    private final PacketLimit allPacketsLimit;
+    private final Map<Class<? extends Packet<?>>, PacketLimit> packetSpecificLimits;
+
+    public PacketLimiterConfig(String kickMessage, PacketLimit allPacketsLimit, Map<Class<? extends Packet<?>>, PacketLimit> packetSpecificLimits) {
+        this.kickMessage = kickMessage;
+        this.allPacketsLimit = allPacketsLimit;
+        this.packetSpecificLimits = packetSpecificLimits;
+    }
+
+    public static final class PacketLimit {
+        public final double packetLimitInterval;
+        public final double maxPacketRate;
+        public final ViolateAction violateAction;
+
+        public PacketLimit(final double packetLimitInterval, final double maxPacketRate, final ViolateAction violateAction) {
+            this.packetLimitInterval = packetLimitInterval;
+            this.maxPacketRate = maxPacketRate;
+            this.violateAction = violateAction;
+        }
+
+        public enum ViolateAction {
+            KICK, DROP;
+        }
+    }
+
+    static PacketLimiterConfig createDefault() {
+        return new PacketLimiterConfig("&cSent too many packets.", new PacketLimit(7, 500, PacketLimit.ViolateAction.KICK), new HashMap<>());
+    }
+
+    public String getKickMessage() {
+        return this.kickMessage;
+    }
+
+    public PacketLimit getAllPacketsLimit() {
+        return this.allPacketsLimit;
+    }
+
+    public Map<Class<? extends Packet<?>>, PacketLimit> getPacketSpecificLimits() {
+        return this.packetSpecificLimits;
+    }
+
+    public static class Serializer implements TypeSerializer<PacketLimiterConfig> {
+        @Override
+        public PacketLimiterConfig deserialize(Type type, ConfigurationNode node) throws SerializationException {
+            String kickMessage = node.node("kickMessage").getString("&cSent too many packets.");
+            ConfigurationNode limits = node.node("limits");
+
+            PacketLimit allPacketsLimit = null;
+            Map<Class<? extends Packet<?>>, PacketLimit> packetSpecificLimits = new HashMap<>();
+
+            for (Map.Entry<Object, ? extends ConfigurationNode> entry : limits.childrenMap().entrySet()) {
+                String key = String.valueOf(entry.getKey());
+                ConfigurationNode limitNode = entry.getValue();
+                if (key.equals("all")) {
+                    PacketLimit packetLimit = new PacketLimit(
+                        limitNode.node("interval").getDouble(),
+                        limitNode.node("maxPacketRate").getDouble(),
+                        PacketLimit.ViolateAction.KICK
+                    );
+
+                    if (packetLimit.packetLimitInterval > 0.0 && packetLimit.maxPacketRate > 0.0) {
+                        allPacketsLimit = packetLimit;
+                    }
+                } else {
+                    Class<?> clazz;
+                    try {
+                        clazz = Class.forName("net.minecraft.server." + key);
+                    } catch (ClassNotFoundException e) {
+                        Bukkit.getLogger().warning("Packet '" + key + "' does not exist, cannot limit it! Please update pandaspigot.yml");
+                        continue;
+                    }
+
+                    if (!Packet.class.isAssignableFrom(clazz)) {
+                        Bukkit.getLogger().warning("Class '" + key + "' is not a packet, cannot limit it! Please update pandaspigot.yml");
+                        continue;
+                    }
+
+                    PacketLimit packetLimit = new PacketLimit(
+                        limitNode.node("interval").getDouble(),
+                        limitNode.node("maxPacketRate").getDouble(),
+                        limitNode.node("action").get(PacketLimit.ViolateAction.class)
+                    );
+
+                    if (packetLimit.packetLimitInterval > 0.0 && packetLimit.maxPacketRate > 0.0) {
+                        //noinspection unchecked
+                        packetSpecificLimits.put((Class<? extends Packet<?>>) clazz, packetLimit);
+                    }
+                }
+            }
+
+            return new PacketLimiterConfig(kickMessage, allPacketsLimit, packetSpecificLimits);
+        }
+
+        @Override
+        public void serialize(Type type, PacketLimiterConfig config, ConfigurationNode target) throws SerializationException {
+            if (config == null) {
+                target.raw(null);
+                return;
+            }
+
+            target.node("kickMessage").set(config.kickMessage);
+            ConfigurationNode limitsNode = target.node("limits");
+            if (config.allPacketsLimit != null) {
+                limitsNode.node("all", "interval").set(config.allPacketsLimit.packetLimitInterval);
+                limitsNode.node("all", "maxPacketRate").set(config.allPacketsLimit.maxPacketRate);
+            }
+
+            for (Map.Entry<Class<? extends Packet<?>>, PacketLimit> entry : config.packetSpecificLimits.entrySet()) {
+                ConfigurationNode node = limitsNode.node(entry.getKey().getSimpleName());
+                PacketLimit limit = entry.getValue();
+
+                node.node("interval", limit.packetLimitInterval);
+                node.node("maxPacketRate", limit.maxPacketRate);
+                node.node("action").set(limit.violateAction);
+            }
+        }
+    }
+}
diff --git a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
index 7db0c0097bcb38e4e49ab12879c230770e47334d..fcf7738c75f21ad23693d903b476c65b4a207a84 100644
--- a/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
+++ b/src/main/java/com/hpfxd/pandaspigot/config/PandaSpigotConfig.java
@@ -38,7 +38,8 @@ public class PandaSpigotConfig {
                         .header("This is the configuration file for PandaSpigot.\n" +
                                 "Use caution when modifying settings, as some may impact gameplay in non-obvious ways.")
                         .mapFactory(MapFactories.insertionOrdered())
-                        .serializers(build -> build.registerAnnotatedObjects(ObjectMapper.factoryBuilder()
+                        .serializers(build -> build.register(PacketLimiterConfig.class, new PacketLimiterConfig.Serializer())
+                                .registerAnnotatedObjects(ObjectMapper.factoryBuilder()
                                 .defaultNamingScheme(NamingSchemes.CAMEL_CASE)
                                 .build())))
                 .build();
@@ -113,4 +114,9 @@ public class PandaSpigotConfig {
     public int maxBookPageSize = 2560;
 
     public double maxBookTotalSizeMultiplier = 0.98d;
+
+    @Comment("Limits incoming packets from players. See Paper's documentation for more info:\n" +
+        "https://docs.papermc.io/paper/reference/paper-global-configuration#packet-limiter\n" +
+        "(note that \"max-packet-rate\" is renamed to \"maxPacketRate\")")
+    public PacketLimiterConfig packetLimiter = PacketLimiterConfig.createDefault();
 }
diff --git a/src/main/java/com/hpfxd/pandaspigot/util/IntervalledCounter.java b/src/main/java/com/hpfxd/pandaspigot/util/IntervalledCounter.java
new file mode 100644
index 0000000000000000000000000000000000000000..d61d44e8e1126ed3bea6e633cc0bdebb0a148828
--- /dev/null
+++ b/src/main/java/com/hpfxd/pandaspigot/util/IntervalledCounter.java
@@ -0,0 +1,116 @@
+package com.hpfxd.pandaspigot.util;
+
+// Originally from PaperMC
+public final class IntervalledCounter {
+
+    protected long[] times;
+    protected long[] counts;
+    protected final long interval;
+    protected long minTime;
+    protected long sum;
+    protected int head; // inclusive
+    protected int tail; // exclusive
+
+    public IntervalledCounter(final long interval) {
+        this.times = new long[8];
+        this.counts = new long[8];
+        this.interval = interval;
+    }
+
+    public void updateCurrentTime() {
+        this.updateCurrentTime(System.nanoTime());
+    }
+
+    public void updateCurrentTime(final long currentTime) {
+        long sum = this.sum;
+        int head = this.head;
+        final int tail = this.tail;
+        final long minTime = currentTime - this.interval;
+
+        final int arrayLen = this.times.length;
+
+        // guard against overflow by using subtraction
+        while (head != tail && this.times[head] - minTime < 0) {
+            sum -= this.counts[head];
+            // there are two ways we can do this:
+            // 1. free the count when adding
+            // 2. free it now
+            // option #2
+            this.counts[head] = 0;
+            if (++head >= arrayLen) {
+                head = 0;
+            }
+        }
+
+        this.sum = sum;
+        this.head = head;
+        this.minTime = minTime;
+    }
+
+    public void addTime(final long currTime) {
+        this.addTime(currTime, 1L);
+    }
+
+    public void addTime(final long currTime, final long count) {
+        // guard against overflow by using subtraction
+        if (currTime - this.minTime < 0) {
+            return;
+        }
+        int nextTail = (this.tail + 1) % this.times.length;
+        if (nextTail == this.head) {
+            this.resize();
+            nextTail = (this.tail + 1) % this.times.length;
+        }
+
+        this.times[this.tail] = currTime;
+        this.counts[this.tail] += count;
+        this.sum += count;
+        this.tail = nextTail;
+    }
+
+    public void updateAndAdd(final int count) {
+        final long currTime = System.nanoTime();
+        this.updateCurrentTime(currTime);
+        this.addTime(currTime, count);
+    }
+
+    public void updateAndAdd(final int count, final long currTime) {
+        this.updateCurrentTime(currTime);
+        this.addTime(currTime, count);
+    }
+
+    private void resize() {
+        final long[] oldElements = this.times;
+        final long[] oldCounts = this.counts;
+        final long[] newElements = new long[this.times.length * 2];
+        final long[] newCounts = new long[this.times.length * 2];
+        this.times = newElements;
+        this.counts = newCounts;
+
+        final int head = this.head;
+        final int tail = this.tail;
+        final int size = tail >= head ? (tail - head) : (tail + (oldElements.length - head));
+        this.head = 0;
+        this.tail = size;
+
+        if (tail >= head) {
+            System.arraycopy(oldElements, head, newElements, 0, size);
+            System.arraycopy(oldCounts, head, newCounts, 0, size);
+        } else {
+            System.arraycopy(oldElements, head, newElements, 0, oldElements.length - head);
+            System.arraycopy(oldElements, 0, newElements, oldElements.length - head, tail);
+
+            System.arraycopy(oldCounts, head, newCounts, 0, oldCounts.length - head);
+            System.arraycopy(oldCounts, 0, newCounts, oldCounts.length - head, tail);
+        }
+    }
+
+    // returns in units per second
+    public double getRate() {
+        return this.size() / (this.interval * 1.0e-9);
+    }
+
+    public long size() {
+        return this.sum;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index df8ff41f691626de37f706df187269bee032358f..5c631068db79615bf51ed357bc9bda2b0ebb0c3b 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -113,6 +113,22 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
         }
     }
     // PandaSpigot end
+    // PandaSpigot start - packet limiter
+    protected final Object PACKET_LIMIT_LOCK = new Object();
+    protected final com.hpfxd.pandaspigot.util.IntervalledCounter allPacketCounts = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getAllPacketsLimit() != null ? new com.hpfxd.pandaspigot.util.IntervalledCounter(
+        (long) (com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getAllPacketsLimit().packetLimitInterval * 1.0e9)
+    ) : null;
+    protected final java.util.Map<Class<? extends Packet<?>>, com.hpfxd.pandaspigot.util.IntervalledCounter> packetSpecificLimits = new java.util.HashMap<>();
+    private boolean stopReadingPackets;
+    private void killForPacketSpam() {
+        IChatBaseComponent[] reason = org.bukkit.craftbukkit.util.CraftChatMessage.fromString(org.bukkit.ChatColor.translateAlternateColorCodes('&', com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getKickMessage()));
+        this.a(new PacketPlayOutKickDisconnect(reason[0]), future -> {
+            this.close(reason[0]);
+            this.k();
+            this.stopReadingPackets = true;
+        }, null);
+    }
+    // PandaSpigot end - packet limiter
     public NetworkManager(EnumProtocolDirection enumprotocoldirection) {
         this.h = enumprotocoldirection;
     }
@@ -159,6 +175,44 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
 
     protected void a(ChannelHandlerContext channelhandlercontext, Packet packet) throws Exception {
         if (this.channel.isOpen()) {
+            // PandaSpigot start - packet limiter
+            if (this.stopReadingPackets) {
+                return;
+            }
+            if (this.allPacketCounts != null ||
+                com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getPacketSpecificLimits().containsKey(packet.getClass())) {
+                long time = System.nanoTime();
+                synchronized (PACKET_LIMIT_LOCK) {
+                    if (this.allPacketCounts != null) {
+                        this.allPacketCounts.updateAndAdd(1, time);
+                        if (this.allPacketCounts.getRate() >= com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getAllPacketsLimit().maxPacketRate) {
+                            this.killForPacketSpam();
+                            return;
+                        }
+                    }
+
+                    for (Class<?> check = packet.getClass(); check != Object.class; check = check.getSuperclass()) {
+                        com.hpfxd.pandaspigot.config.PacketLimiterConfig.PacketLimit packetSpecificLimit = com.hpfxd.pandaspigot.config.PandaSpigotConfig.get().packetLimiter.getPacketSpecificLimits().get(check);
+                        if (packetSpecificLimit == null) {
+                            continue;
+                        }
+                        com.hpfxd.pandaspigot.util.IntervalledCounter counter = this.packetSpecificLimits.computeIfAbsent((Class) check, clazz -> {
+                            return new com.hpfxd.pandaspigot.util.IntervalledCounter((long) (packetSpecificLimit.packetLimitInterval * 1.0e9));
+                        });
+                        counter.updateAndAdd(1, time);
+                        if (counter.getRate() >= packetSpecificLimit.maxPacketRate) {
+                            switch (packetSpecificLimit.violateAction) {
+                                case DROP:
+                                    return;
+                                case KICK:
+                                    this.killForPacketSpam();
+                                    return;
+                            }
+                        }
+                    }
+                }
+            }
+            // PandaSpigot end - packet limiter
             try {
                 packet.a(this.m);
             } catch (CancelledPacketHandleException cancelledpackethandleexception) {
