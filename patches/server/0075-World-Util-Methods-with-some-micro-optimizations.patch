From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mechoriet <kevinworm92@gmail.com>
Date: Tue, 27 Dec 2022 02:02:33 +0100
Subject: [PATCH] World Util Methods with some micro optimizations


diff --git a/src/main/java/net/minecraft/server/IBlockAccess.java b/src/main/java/net/minecraft/server/IBlockAccess.java
index 304e82754e7f0d3cec6bbd97d1e563f7421090cc..f6befd7f8c50afc372ae1a8cd9c04d0b34e4f919 100644
--- a/src/main/java/net/minecraft/server/IBlockAccess.java
+++ b/src/main/java/net/minecraft/server/IBlockAccess.java
@@ -9,4 +9,9 @@ public interface IBlockAccess {
     boolean isEmpty(BlockPosition blockposition);
 
     int getBlockPower(BlockPosition blockposition, EnumDirection enumdirection);
+    // PandaSpigot start
+    default IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+        return this.getType(blockposition);
+    }
+    // PandaSpigot end
 }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index a92b1eb303e01bc42157fe384279d7ad42be03f8..3c7e8fc301accea3b7cb7f1366374e135e7443e9 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -362,25 +362,92 @@ public abstract class World implements IBlockAccess {
         return this.chunkProvider.getOrCreateChunk(i, j);
     }
 
-    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+    // PandaSpigot start
+    private void setCapturedBlockType(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        BlockState blockstate = null;
+        Iterator<BlockState> it = capturedBlockStates.iterator();
+        while (it.hasNext()) {
+            BlockState previous = it.next();
+            if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                blockstate = previous;
+                it.remove();
+                break;
+            }
+        }
+        if (blockstate == null) {
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+        }
+        blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
+        blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+        this.capturedBlockStates.add(blockstate);
+    }
+
+    public boolean setTypeAndDataIfLoaded(BlockPosition blockposition, IBlockData iblockdata, int i) {
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
-            BlockState blockstate = null;
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    blockstate = previous;
-                    it.remove();
-                    break;
-                }
-            }
-            if (blockstate == null) {
-                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
-            }
-            blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
-            blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+            this.setCapturedBlockType(blockposition, iblockdata, i);
+            return true;
+        }
+        // CraftBukkit end
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) {
+            return false;
+        }
+
+        if (!this.isValidLocation(x, y, z)) {
+            return false;
+        }
+
+        if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+            return false;
+        }
+
+        Block block = iblockdata.getBlock();
+
+        // CraftBukkit start - capture blockstates
+        BlockState blockstate = null;
+        if (this.captureBlockStates) {
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, x, y, z, i);
             this.capturedBlockStates.add(blockstate);
+        }
+        // CraftBukkit end
+
+        IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
+
+        if (iblockdata1 == null) {
+            // CraftBukkit start - remove blockstate if failed
+            if (this.captureBlockStates) {
+                this.capturedBlockStates.remove(blockstate);
+            }
+            // CraftBukkit end
+            return false;
+        }
+        Block block1 = iblockdata1.getBlock();
+
+        if (block.p() != block1.p() || block.r() != block1.r()) {
+            this.methodProfiler.a("checkLight");
+            this.x(blockposition);
+            this.methodProfiler.b();
+        }
+
+        // CraftBukkit start
+        if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+            // Modularize client and physic updates
+            notifyAndUpdatePhysics(blockposition, chunk, block1, block, i);
+        }
+        // CraftBukkit end
+
+        return true;
+    }
+    // PandaSpigot end
+
+    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            this.setCapturedBlockType(blockposition, iblockdata, i); // PandaSpigot
             return true;
         }
         // CraftBukkit end
@@ -478,6 +545,11 @@ public abstract class World implements IBlockAccess {
         }
     }
 
+    // PandaSpigot start
+    public boolean setTypeUpdateIfLoaded(BlockPosition blockPosition, IBlockData iblockdata) {
+        return this.setTypeAndDataIfLoaded(blockPosition, iblockdata, 3);
+    }
+    // PandaSpigot end
     public boolean setTypeUpdate(BlockPosition blockposition, IBlockData iblockdata) {
         return this.setTypeAndData(blockposition, iblockdata, 3);
     }
