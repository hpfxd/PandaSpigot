From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Aikar <aikar@aikar.co>
Date: Sun, 6 Nov 2022 14:36:47 -0300
Subject: [PATCH] Use Fastutil Collections

Swap out CraftBukkit LongObjectHashMap with Long2ObjectOpenHashMap
Swap out Integer key HashMap for a Int2ObjectOpenHashMap For ChunkProviderServer

Also swap out datawatcher collections for their fastutil equivelents.

Amaranth, the creator of LongObjectHashMap, tested it vs fastutil and determined fastutil to be 3x faster
and could not create anything faster than fastutil.

These collections are super fast as seen
http://java-performance.info/hashmap-overview-jdk-fastutil-goldman-sachs-hppc-koloboke-trove-january-2015/

diff --git a/build.gradle.kts b/build.gradle.kts
index b208da3ee4c54475630c64de43fb934855dc49c3..351817e215e969d3f49dd5eedcc8a282aefaaba7 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -19,6 +19,7 @@ dependencies {
     // PandaSpigot end
 
     // Minecraft libraries:
+    implementation("it.unimi.dsi:fastutil:7.0.12") // PandaSpigot - Use Fastutil Collections
     implementation("io.netty:netty-all:4.1.69.Final") // PandaSpigot - Update Netty to 4.1.x
     implementation("com.mojang:authlib:1.5.21")
     implementation("org.apache.logging.log4j:log4j-api:2.17.1")
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 9d31e75170c96103cd74557323af84dfbd9964ab..ea08370b4079bf6508c53e61de0bf74e40559539 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -29,12 +29,12 @@ import org.github.paperspigot.exception.ServerInternalException;
 public class ChunkProviderServer implements IChunkProvider {
 
     private static final Logger b = LogManager.getLogger();
-    public LongHashSet unloadQueue = new LongHashSet(); // CraftBukkit - LongHashSet
+    public it.unimi.dsi.fastutil.longs.LongSet unloadQueue = new it.unimi.dsi.fastutil.longs.LongArraySet(); // CraftBukkit - LongHashSet // PandaSpigot - LongHashSet -> HashArraySet
     public Chunk emptyChunk;
     public IChunkProvider chunkProvider;
     private IChunkLoader chunkLoader;
     public boolean forceChunkLoad = false; // CraftBukkit - true -> false
-    public LongObjectHashMap<Chunk> chunks = new LongObjectHashMap<Chunk>();
+    public it.unimi.dsi.fastutil.longs.Long2ObjectMap<Chunk> chunks = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<Chunk>(4096, 0.5f); // PandaSpigot - use trove Long2ObjectOpenHashMap instead of craftbukkit implementation (using inital capacity and load factor chosen by Amaranth in an old impl)
     public WorldServer world;
 
     public ChunkProviderServer(WorldServer worldserver, IChunkLoader ichunkloader, IChunkProvider ichunkprovider) {
@@ -76,7 +76,7 @@ public class ChunkProviderServer implements IChunkProvider {
         if (this.world.worldProvider.e()) {
             if (!this.world.c(i, j)) {
                 // CraftBukkit start
-                this.unloadQueue.add(i, j);
+                this.unloadQueue.add(LongHash.toLong(i, j)); // PandaSpigot - directly invoke LongHash
 
                 Chunk c = chunks.get(LongHash.toLong(i, j));
                 if (c != null) {
@@ -86,7 +86,7 @@ public class ChunkProviderServer implements IChunkProvider {
             }
         } else {
             // CraftBukkit start
-            this.unloadQueue.add(i, j);
+            this.unloadQueue.add(LongHash.toLong(i, j)); // PandaSpigot - directly invoke LongHash
 
             Chunk c = chunks.get(LongHash.toLong(i, j));
             if (c != null) {
@@ -118,7 +118,7 @@ public class ChunkProviderServer implements IChunkProvider {
     }
 
     public Chunk getChunkAt(int i, int j, Runnable runnable) {
-        unloadQueue.remove(i, j);
+        unloadQueue.remove(LongHash.toLong(i, j)); // PandaSpigot - directly invoke LongHash
         Chunk chunk = chunks.get(LongHash.toLong(i, j));
         ChunkRegionLoader loader = null;
 
@@ -146,7 +146,7 @@ public class ChunkProviderServer implements IChunkProvider {
         return chunk;
     }
     public Chunk originalGetChunkAt(int i, int j) {
-        this.unloadQueue.remove(i, j);
+        this.unloadQueue.remove(LongHash.toLong(i, j)); // PandaSpigot - directly invoke LongHash
         Chunk chunk = (Chunk) this.chunks.get(LongHash.toLong(i, j));
         boolean newChunk = false;
         // CraftBukkit end
@@ -370,8 +370,12 @@ public class ChunkProviderServer implements IChunkProvider {
         if (!this.world.savingDisabled) {
             // CraftBukkit start
             Server server = this.world.getServer();
-            for (int i = 0; i < 100 && !this.unloadQueue.isEmpty(); ++i) {
-                long chunkcoordinates = this.unloadQueue.popFirst();
+            // PandaSpigot start - use iterator for unloadQueue
+            it.unimi.dsi.fastutil.longs.LongIterator iterator = unloadQueue.iterator();
+            for (int i = 0; i < 100 && iterator.hasNext(); ++i) {
+                long chunkcoordinates = iterator.next();
+                iterator.remove();
+            // PandaSpigot end
                 Chunk chunk = this.chunks.get(chunkcoordinates);
                 if (chunk == null) continue;
 
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index dec091e7311056650dd03a980b2c4aa8299fac4b..3e7380b345dc751c0e558a0872790ada7c11fd00 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -16,11 +16,13 @@ public class DataWatcher {
     private final Entity a;
     private boolean b = true;
     // Spigot Start
-    private static final gnu.trove.map.TObjectIntMap classToId = new gnu.trove.map.hash.TObjectIntHashMap( 10, 0.5f, -1 );
-    private final gnu.trove.map.TIntObjectMap dataValues = new gnu.trove.map.hash.TIntObjectHashMap( 10, 0.5f, -1 );
+    // PandaSpigot start - use fastutil instead of trove
+    private static final it.unimi.dsi.fastutil.objects.Object2IntMap<Class<?>> classToId = new it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap(10, 0.5f);
+    private final it.unimi.dsi.fastutil.ints.Int2ObjectMap dataValues = new it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap(10, 0.5f);
     // These exist as an attempt at backwards compatability for (broken) NMS plugins
-    private static final Map<Class<?>, Integer> c = gnu.trove.TDecorators.wrap( classToId );
-    private final Map<Integer, DataWatcher.WatchableObject> d = gnu.trove.TDecorators.wrap( dataValues );
+    private static final Map<Class<?>, Integer> c = classToId;
+    private final Map<Integer, DataWatcher.WatchableObject> d = dataValues;
+    // PandaSpigot end
     // Spigot End
     private boolean e;
     private ReadWriteLock f = new ReentrantReadWriteLock();
@@ -144,7 +146,7 @@ public class DataWatcher {
 
         if (this.e) {
             this.f.readLock().lock();
-            Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
+            Iterator iterator = this.dataValues.values().iterator(); // Spigot // PandaSpigot
 
             while (iterator.hasNext()) {
                 DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
@@ -179,7 +181,7 @@ public class DataWatcher {
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.f.readLock().lock();
-        Iterator iterator = this.dataValues.valueCollection().iterator(); // Spigot
+        Iterator iterator = this.dataValues.values().iterator(); // Spigot // PandaSpigot
 
         while (iterator.hasNext()) {
             DataWatcher.WatchableObject datawatcher_watchableobject = (DataWatcher.WatchableObject) iterator.next();
@@ -196,7 +198,7 @@ public class DataWatcher {
 
         this.f.readLock().lock();
 
-        arraylist.addAll(this.dataValues.valueCollection()); // Spigot
+        arraylist.addAll(this.dataValues.values()); // Spigot // PandaSpigot
         // Spigot start - copy ItemStacks to prevent ConcurrentModificationExceptions
         for ( int i = 0; i < arraylist.size(); i++ )
         {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 0700b5aec26a6a4ba4db4d3c66b8b15c295c5a03..2287792a750b337ab3312025b8cf21503eb3e9d6 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -404,7 +404,7 @@ public class WorldServer extends World implements IAsyncTaskHandler {
                 int chunkX = World.keyToX( chunkCoord );
                 int chunkZ = World.keyToZ( chunkCoord );
                 // If unloaded, or in procedd of being unloaded, drop it
-                if ( ( !this.chunkProvider.isChunkLoaded( chunkX, chunkZ ) ) || ( this.chunkProviderServer.unloadQueue.contains( chunkX, chunkZ ) ) )
+                if ( ( !this.chunkProvider.isChunkLoaded( chunkX, chunkZ ) ) || ( this.chunkProviderServer.unloadQueue.contains( LongHash.toLong(chunkX, chunkZ) ) ) ) // PandaSpigot
                 {
                     iter.remove();
                     continue;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index f663a6468b40e8ddd1fee3ad46381d8eede45e64..d5734b366166af9af5e0194487bedf5f4fb62e55 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -219,7 +219,7 @@ public class CraftWorld implements World {
             world.chunkProviderServer.saveChunkNOP(chunk);
         }
 
-        world.chunkProviderServer.unloadQueue.remove(x, z);
+        world.chunkProviderServer.unloadQueue.remove(LongHash.toLong(x, z)); // PandaSpigot - invoke LongHash directly
         world.chunkProviderServer.chunks.remove(LongHash.toLong(x, z));
 
         return true;
@@ -228,7 +228,7 @@ public class CraftWorld implements World {
     public boolean regenerateChunk(int x, int z) {
         unloadChunk(x, z, false, false);
 
-        world.chunkProviderServer.unloadQueue.remove(x, z);
+        world.chunkProviderServer.unloadQueue.remove(LongHash.toLong(x, z)); // PandaSpigot - invoke LongHash directly
 
         net.minecraft.server.Chunk chunk = null;
 
@@ -277,7 +277,7 @@ public class CraftWorld implements World {
             return world.chunkProviderServer.getChunkAt(x, z) != null;
         }
 
-        world.chunkProviderServer.unloadQueue.remove(x, z);
+        world.chunkProviderServer.unloadQueue.remove(LongHash.toLong(x, z)); // PandaSpigot - invoke LongHash directly
         net.minecraft.server.Chunk chunk = world.chunkProviderServer.chunks.get(LongHash.toLong(x, z));
 
         if (chunk == null) {
@@ -1428,7 +1428,7 @@ public class CraftWorld implements World {
             }
 
             // Already unloading?
-            if (cps.unloadQueue.contains(chunk.locX, chunk.locZ)) {
+            if (cps.unloadQueue.contains(LongHash.toLong(chunk.locX, chunk.locZ))) { // PandaSpigot - invoke LongHash directly
                 continue;
             }
 
