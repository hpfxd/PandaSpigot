From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: uRyanxD <familiarodrigues123ro@gmail.com>
Date: Mon, 10 Feb 2025 14:55:55 -0300
Subject: [PATCH] New Tick Loop System


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b83d774412562540808440eec845da2593383d91..3a9fd8da8887b04f99fbf5113a8ae44affd6f258 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -512,6 +512,10 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     }
 
     // PaperSpigot start - Further improve tick loop
+    // PandaSpigot start - New Tick Loop System
+    private long lastTick = 0;
+    private long catchupTime = 0;
+    // PandaSpigot end
     private static final int TPS = 20;
     private static final long SEC_IN_NANO = 1000000000;
     private static final long TICK_TIME = SEC_IN_NANO / TPS;
@@ -525,39 +529,47 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public static class RollingAverage {
         private final int size;
         private long time;
-        private double total;
+        private java.math.BigDecimal total; // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
         private int index = 0;
-        private final double[] samples;
+        private final java.math.BigDecimal[] samples; // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
         private final long[] times;
 
         RollingAverage(int size) {
             this.size = size;
             this.time = size * SEC_IN_NANO;
-            this.total = TPS * SEC_IN_NANO * size;
-            this.samples = new double[size];
+            // PandaSpigot start - Use BigDecimal to improve accuracy of TPS results
+            this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
+            this.samples = new java.math.BigDecimal[size];
+            // PandaSpigot end
             this.times = new long[size];
             for (int i = 0; i < size; i++) {
-                this.samples[i] = TPS;
+                this.samples[i] = dec(TPS); // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
                 this.times[i] = SEC_IN_NANO;
             }
         }
 
-        public void add(double x, long t) {
+        // PandaSpigot start - Use BigDecimal to improve accuracy of TPS results
+        private static java.math.BigDecimal dec(long t) {
+            return new java.math.BigDecimal(t);
+        }
+        public void add(java.math.BigDecimal x, long t) {
+        // PandaSpigot end
             time -= times[index];
-            total -= samples[index] * times[index];
+            total = total.subtract(samples[index].multiply(dec(times[index]))); // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
             samples[index] = x;
             times[index] = t;
             time += t;
-            total += x * t;
+            total = total.add(x.multiply(dec(t))); // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
             if (++index == size) {
                 index = 0;
             }
         }
 
         public double getAverage() {
-            return total / time;
+            return total.divide(dec(time), 30, java.math.RoundingMode.HALF_UP).doubleValue(); // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
         }
     }
+    private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal("1E9").multiply(new java.math.BigDecimal(SAMPLE_INTERVAL)); // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
     // PaperSpigot End
  
     public void run() {
@@ -573,8 +585,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                 // Spigot start
                 // PaperSpigot start - Further improve tick loop
                 Arrays.fill( recentTps, 20 );
-                //long lastTick = System.nanoTime(), catchupTime = 0, curTime, wait, tickSection = lastTick;
-                long start = System.nanoTime(), lastTick = start - TICK_TIME, catchupTime = 0, curTime, wait, tickSection = start;
+                // PandaSpigot start - New Tick Loop System
+                // lastTick and catchupTime were removed from this method, moved up to be used by events
+                long start = System.nanoTime(), curTime, wait, tickSection = start;
+                lastTick = start - TICK_TIME;
+                // PandaSpigot
                 // PaperSpigot end
                 while (this.isRunning) {
                     curTime = System.nanoTime();
@@ -602,7 +617,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
                     if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
                         final long diff = curTime - tickSection;
-                        double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+                        java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP); // PandaSpigot - Use BigDecimal to improve accuracy of TPS results
                         tps1.add(currentTps, diff);
                         tps5.add(currentTps, diff);
                         tps15.add(currentTps, diff);
@@ -705,6 +720,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     protected void A() throws ExceptionWorldConflict { // CraftBukkit - added throws
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.startTiming(); // Spigot
         long i = System.nanoTime();
+        new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.ticks + 1).callEvent(); // PandaSpigot - Add ServerTickStartEvent
 
         ++this.ticks;
         if (this.T) {
@@ -763,6 +779,11 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.methodProfiler.b();
         this.methodProfiler.b();
         org.spigotmc.WatchdogThread.tick(); // Spigot
+        // PandaSpigot start - Add ServerTickEndEvent
+        long endTime = System.nanoTime();
+        long remaining = (TICK_TIME - (endTime - lastTick)) - catchupTime;
+        new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
+        // PandaSpigot end
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Spigot
     }
 
