From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <spottedleaf@spottedleaf.dev>
Date: Fri, 29 Oct 2021 08:25:50 -0400
Subject: [PATCH] Optimise non-flush packet sending

Places like entity tracking make heavy use of packet sending,
and internally netty will use some very expensive thread wakeup
calls when scheduling.

Thanks to various hacks in ProtocolLib as well as other
plugins, we cannot simply use a queue of packets to group
send on execute. We have to call execute for each packet.

Tux's suggestion here is exactly what was needed - tag
the Runnable indicating it should not make a wakeup call.

Big thanks to Tux for making this possible as I had given
up on this optimisation before he came along.

Locally this patch drops the entity tracker tick by a full 1.5x.

diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index b455a3159cd79704ba8da66ca540a4ea48719f05..06e57ed7e48e14f07da4f9264c6ddc7017821578 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -305,8 +305,14 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
             }
             // PandaSpigot end
         } else {
-            this.channel.eventLoop().execute(new Runnable() {
-                public void run() {
+            // PandaSpigot start - optimise packets that are not flushed
+            io.netty.util.concurrent.AbstractEventExecutor.LazyRunnable choice1 = null;
+            Runnable choice2 = null;
+            // note: since the type is not dynamic here, we need to actually copy the old executor code
+            // into two branches. On conflict, just re-copy - no changes were made inside the executor code.
+            if (!flush) {
+                choice1 = () -> {
+            // PandaSpigot end
                     if (enumprotocol != enumprotocol1) {
                         NetworkManager.this.a(enumprotocol);
                     }
@@ -337,8 +343,44 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet> {
                     packet.onPacketDispatchFinish(player, null);
                 }
                 // PandaSpigot end
-                }
-            });
+                // PandaSpigot start - optimise packets that are not flushed
+                };
+            } else {
+                choice2 = () -> {
+                    if (enumprotocol != enumprotocol1) {
+                        NetworkManager.this.a(enumprotocol);
+                    }
+
+                    // PandaSpigot start
+                    if (!isConnected()) {
+                        packet.onPacketDispatchFinish(player, null);
+                        return;
+                    }
+                    try {
+                        // PandaSpigot end
+                        ChannelFuture channelfuture = (flush) ? NetworkManager.this.channel.writeAndFlush(packet) : NetworkManager.this.channel.write(packet); // PandaSpigot - add flush parameter
+
+                        if (agenericfuturelistener != null) {
+                            channelfuture.addListeners(agenericfuturelistener);
+                        }
+
+                        // PandaSpigot start
+                        if (packet.hasFinishListener()) {
+                            channelfuture.addListener((ChannelFutureListener) channelFuture -> packet.onPacketDispatchFinish(player, channelFuture));
+                        }
+                        // PandaSpigot end
+                        channelfuture.addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                        // PandaSpigot start
+                    } catch (Exception e) {
+                        g.error("NetworkException: " + player, e);
+                        close(new ChatMessage("disconnect.genericReason", "Internal Exception: " + e.getMessage()));
+                        packet.onPacketDispatchFinish(player, null);
+                    }
+                    // PandaSpigot end
+                };
+            }
+            this.channel.eventLoop().execute(choice1 != null ? choice1 : choice2);
+            // PandaSpigot end
         }
 
     }
