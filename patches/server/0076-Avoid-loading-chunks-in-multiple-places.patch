From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mechoriet <kevinworm92@gmail.com>
Date: Fri, 18 Nov 2022 12:38:10 +0100
Subject: [PATCH] Avoid loading chunks in multiple places


diff --git a/src/main/java/net/minecraft/server/BlockChest.java b/src/main/java/net/minecraft/server/BlockChest.java
index eed516e223607e84bb475c51cef21e7f0b1073c2..102a4a5d43752b36faaa46e6d20b94f5aef34f40 100644
--- a/src/main/java/net/minecraft/server/BlockChest.java
+++ b/src/main/java/net/minecraft/server/BlockChest.java
@@ -50,8 +50,12 @@ public class BlockChest extends BlockContainer {
         while (iterator.hasNext()) {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
-            IBlockData iblockdata1 = world.getType(blockposition1);
-
+            // PandaSpigot start - Use getTypeIfLoaded
+            final IBlockData iblockdata1 = world.getTypeIfLoaded(blockposition1);
+            if (iblockdata1 == null) {
+                continue;
+            }
+            // PandaSpigot end
             if (iblockdata1.getBlock() == this) {
                 this.e(world, blockposition1, iblockdata1);
             }
diff --git a/src/main/java/net/minecraft/server/BlockFire.java b/src/main/java/net/minecraft/server/BlockFire.java
index 76cd512964ce86c8488e0985fd43afc0050bb4a2..dfcf556b6bb82a5ff971fee645323d463c45ed0f 100644
--- a/src/main/java/net/minecraft/server/BlockFire.java
+++ b/src/main/java/net/minecraft/server/BlockFire.java
@@ -176,6 +176,7 @@ public class BlockFire extends Block {
                                 }
 
                                 BlockPosition blockposition1 = blockposition.a(j, l, k);
+                                if (!world.isLoaded(blockposition1)) continue; // PandaSpigot - Prevent Fire from loading chunks
                                 int j1 = this.m(world, blockposition1);
 
                                 if (j1 > 0) {
@@ -244,10 +245,14 @@ public class BlockFire extends Block {
     }
 
     private void a(World world, BlockPosition blockposition, int i, Random random, int j) {
-        int k = this.c(world.getType(blockposition).getBlock());
+        // PandaSpigot start - Prevent Fire from loading chunks
+        final IBlockData iblockdata = world.getTypeIfLoaded(blockposition);
+        if (iblockdata == null) return;
+        int k = this.c(iblockdata.getBlock());
+        // PandaSpigot end
 
         if (random.nextInt(i) < k) {
-            IBlockData iblockdata = world.getType(blockposition);
+            //IBlockData iblockdata = world.getType(blockposition); // PandaSpigot - removed since assigned if loaded just above
 
             // CraftBukkit start
             org.bukkit.block.Block theBlock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
@@ -305,7 +310,11 @@ public class BlockFire extends Block {
             for (int k = 0; k < j; ++k) {
                 EnumDirection enumdirection = aenumdirection[k];
 
-                i = Math.max(this.d(world.getType(blockposition.shift(enumdirection)).getBlock()), i);
+                // PandaSpigot start - only assign i if chunk is loaded; otherwise skip
+                final IBlockData type = world.getTypeIfLoaded(blockposition.shift(enumdirection));
+                if (type == null) continue;
+                i = Math.max(this.d(type.getBlock()), i);
+                // PandaSpigot end
             }
 
             return i;
diff --git a/src/main/java/net/minecraft/server/BlockFluids.java b/src/main/java/net/minecraft/server/BlockFluids.java
index db73f5d9cc85579037c3d95509a1227946cb08d6..4e969f25255144c04596851ed124ef6d97e1611a 100644
--- a/src/main/java/net/minecraft/server/BlockFluids.java
+++ b/src/main/java/net/minecraft/server/BlockFluids.java
@@ -85,7 +85,13 @@ public abstract class BlockFluids extends Block {
             int k;
 
             if (j < 0) {
-                if (!iblockaccess.getType(blockposition1).getBlock().getMaterial().isSolid()) {
+                // PandaSpigot start
+                IBlockData iblockdata = iblockaccess.getTypeIfLoaded(blockposition1);
+                if (iblockdata == null) {
+                    continue;
+                }
+                if (!iblockdata.getBlock().getMaterial().isSolid()) {
+                    // PandaSpigot end
                     j = this.f(iblockaccess, blockposition1.down());
                     if (j >= 0) {
                         k = j - (i - 8);
@@ -139,7 +145,13 @@ public abstract class BlockFluids extends Block {
             for (int j = 0; j < i; ++j) {
                 EnumDirection enumdirection = aenumdirection[j];
 
-                if (enumdirection != EnumDirection.DOWN && world.getType(blockposition.shift(enumdirection)).getBlock().getMaterial() == Material.WATER) {
+                // PandaSpigot start
+                IBlockData iblockdata1 = world.getTypeIfLoaded(blockposition.shift(enumdirection));
+                if (iblockdata1 == null) {
+                    continue;
+                }
+                if (enumdirection != EnumDirection.DOWN && iblockdata1.getBlock().getMaterial() == Material.WATER) {
+                    // PandaSpigot end
                     flag = true;
                     break;
                 }
@@ -149,13 +161,13 @@ public abstract class BlockFluids extends Block {
                 Integer integer = (Integer) iblockdata.get(BlockFluids.LEVEL);
 
                 if (integer.intValue() == 0) {
-                    world.setTypeUpdate(blockposition, Blocks.OBSIDIAN.getBlockData());
+                    if (world.setTypeUpdateIfLoaded(blockposition, Blocks.OBSIDIAN.getBlockData())) // Paper
                     this.fizz(world, blockposition);
                     return true;
                 }
 
                 if (integer.intValue() > 0) { // PaperSpigot
-                    world.setTypeUpdate(blockposition, Blocks.COBBLESTONE.getBlockData());
+                    if (world.setTypeUpdateIfLoaded(blockposition, Blocks.COBBLESTONE.getBlockData())) // Paper
                     this.fizz(world, blockposition);
                     return true;
                 }
diff --git a/src/main/java/net/minecraft/server/BlockLeaves.java b/src/main/java/net/minecraft/server/BlockLeaves.java
index 7bf9018bae77e97ce5d2991897edf186ef1ed741..399c2bddd4e0ed27a98ab07a20d981f39683a4c3 100644
--- a/src/main/java/net/minecraft/server/BlockLeaves.java
+++ b/src/main/java/net/minecraft/server/BlockLeaves.java
@@ -69,7 +69,7 @@ public abstract class BlockLeaves extends BlockTransparent {
                     for (k1 = -b0; k1 <= b0; ++k1) {
                         for (l1 = -b0; l1 <= b0; ++l1) {
                             for (i2 = -b0; i2 <= b0; ++i2) {
-                                Block block = world.getType(blockposition_mutableblockposition.c(j + k1, k + l1, l + i2)).getBlock();
+                                Block block = world.getTypeIfLoaded(blockposition_mutableblockposition.c(j + k1, k + l1, l + i2)).getBlock(); // PandaSpigot - Use getTypeIfLoaded
 
                                 if (block != Blocks.LOG && block != Blocks.LOG2) {
                                     if (block.getMaterial() == Material.LEAVES) {
diff --git a/src/main/java/net/minecraft/server/ChunkCache.java b/src/main/java/net/minecraft/server/ChunkCache.java
index 45d385d31296eda75aa30500118c21406df5fe43..e953d6d80ef020f8e4540eae6881709fc8906b8f 100644
--- a/src/main/java/net/minecraft/server/ChunkCache.java
+++ b/src/main/java/net/minecraft/server/ChunkCache.java
@@ -23,7 +23,7 @@ public class ChunkCache implements IBlockAccess {
 
         for (l = this.a; l <= j; ++l) {
             for (i1 = this.b; i1 <= k; ++i1) {
-                this.c[l - this.a][i1 - this.b] = world.getChunkAt(l, i1);
+                this.c[l - this.a][i1 - this.b] = world.getChunkIfLoaded(l, i1); // PandaSpigot - Don't load chunks for pathfinding
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/EntityEnderman.java b/src/main/java/net/minecraft/server/EntityEnderman.java
index f3afbbd3a20ebf7d51a8fac418cff3e6f59ab56f..6d5fec85c8a79df2ea299c31196bab58f722fa9e 100644
--- a/src/main/java/net/minecraft/server/EntityEnderman.java
+++ b/src/main/java/net/minecraft/server/EntityEnderman.java
@@ -352,7 +352,10 @@ public class EntityEnderman extends EntityMonster {
             int j = MathHelper.floor(this.enderman.locY + random.nextDouble() * 3.0D);
             int k = MathHelper.floor(this.enderman.locZ - 2.0D + random.nextDouble() * 4.0D);
             BlockPosition blockposition = new BlockPosition(i, j, k);
-            IBlockData iblockdata = world.getType(blockposition);
+            // PandaSpigot start - avoid loading chunks
+            IBlockData iblockdata = world.getTypeIfLoaded(blockposition);
+            if (iblockdata == null) return;
+            // PandaSpigot end
             Block block = iblockdata.getBlock();
 
             if (EntityEnderman.c.contains(block)) {
@@ -386,10 +389,13 @@ public class EntityEnderman extends EntityMonster {
             int j = MathHelper.floor(this.a.locY + random.nextDouble() * 2.0D);
             int k = MathHelper.floor(this.a.locZ - 1.0D + random.nextDouble() * 2.0D);
             BlockPosition blockposition = new BlockPosition(i, j, k);
-            Block block = world.getType(blockposition).getBlock();
+            // PandaSpigot start - avoid loading chunks
+            IBlockData iblockdata = world.getTypeIfLoaded(blockposition);
+            if (iblockdata == null) return;
             Block block1 = world.getType(blockposition.down()).getBlock();
 
-            if (this.a(world, blockposition, this.a.getCarried().getBlock(), block, block1)) {
+            if (this.a(world, blockposition, this.a.getCarried().getBlock(), iblockdata.getBlock(), block1)) {
+            // PandaSpigot end
                 // CraftBukkit start - Place event
                 if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.a, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.a.getCarried().getBlock(), this.a.getCarried().getBlock().toLegacyData(this.a.getCarried())).isCancelled()) {
                 world.setTypeAndData(blockposition, this.a.getCarried(), 3);
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index 284f4bf2f6b7790a85d22fa1d4e5fa37f1f4aca2..657c0f52783bcb2eb0f798bfdac6523cb403332b 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -73,7 +73,7 @@ public final class SpawnerCreature {
                             long chunkCoords = LongHash.toLong(i1 + l, k + j);
                             if (!this.b.contains(chunkCoords)) {
                                 ++i;
-                                if (!flag3 && worldserver.getWorldBorder().isInBounds(i1 + l, k + j)) {
+                                if (!flag3 && worldserver.isChunkLoaded(i1 + l, k + j, true) && worldserver.getWorldBorder().isInBounds(i1 + l, k + j)) { // PandaSpigot
                                     this.b.add(chunkCoords);
                                 }
                             }
@@ -112,7 +112,7 @@ public final class SpawnerCreature {
                 if (limit == 0) {
                     continue;
                 }
-				int mobcnt = 0; // Spigot
+                int mobcnt = 0; // Spigot
                 // CraftBukkit end
 
                 if ((!enumcreaturetype.d() || flag1) && (enumcreaturetype.d() || flag) && (!enumcreaturetype.e() || flag2)) {
@@ -132,7 +132,11 @@ public final class SpawnerCreature {
                             int i2 = blockposition1.getX();
                             int j2 = blockposition1.getY();
                             int k2 = blockposition1.getZ();
-                            Block block = worldserver.getType(blockposition1).getBlock();
+                            // PandaSpigot start - avoid loading chunks
+                            IBlockData iblockdata = worldserver.getWorldBorder().isInBounds(blockposition1.asLong()) ? worldserver.getTypeIfLoaded(blockposition1) : null;
+                            if(iblockdata == null) return 0;
+                            Block block = iblockdata.getBlock();
+                            // PandaSpigot end
 
                             if (!block.isOccluding()) {
                                 int l2 = 0;
@@ -157,7 +161,7 @@ public final class SpawnerCreature {
                                                 float f = (float) j3 + 0.5F;
                                                 float f1 = (float) l3 + 0.5F;
 
-                                                if (!worldserver.isPlayerNearbyWhoAffectsSpawning((double) f, (double) k3, (double) f1, 24.0D) && blockposition.c((double) f, (double) k3, (double) f1) >= 576.0D) { // PaperSpigot - Affects Spawning API
+                                                if (worldserver.getWorldBorder().isInBounds(blockposition2.asLong()) && worldserver.getChunkIfLoaded(blockposition2.getX(),blockposition2.getY()) != null && !worldserver.isPlayerNearbyWhoAffectsSpawning((double) f, (double) k3, (double) f1, 24.0D) && blockposition.c((double) f, (double) k3, (double) f1) >= 576.0D) { // PaperSpigot - Affects Spawning API
                                                     if (biomebase_biomemeta == null) {
                                                         biomebase_biomemeta = worldserver.a(enumcreaturetype, blockposition2);
                                                         if (biomebase_biomemeta == null) {
diff --git a/src/main/java/net/minecraft/server/Village.java b/src/main/java/net/minecraft/server/Village.java
index e67aa0423f6a28b286174662f29ffc32a74992d9..22c3ac7a71043ab82e7d3c95c71e02fa8b8927ef 100644
--- a/src/main/java/net/minecraft/server/Village.java
+++ b/src/main/java/net/minecraft/server/Village.java
@@ -37,11 +37,35 @@ public class Village {
         this.a = world;
     }
 
+    // PandaSpigot start
+    private BlockPosition[] positions = null;
+    private void calculateNewCheckPositions() {
+        if(this.d == null || this.d.equals(BlockPosition.ZERO)) {
+            this.positions = null;
+        } else {
+            this.positions = new BlockPosition[] { this.d.a(-this.e, 0, -this.e),
+                    this.d.a(-this.e, 0, this.e),
+                    this.d.a(this.e, 0, -this.e),
+                    this.d.a(this.e, 0, this.e),
+                    this.d};
+        }
+    }
+    public boolean isVillageAreaLoaded() {
+        for(int i = 0; this.positions != null && i < this.positions.length; i++) {
+            if(this.a.isLoaded(this.positions[i])) {
+                return true;
+            }
+        }
+        return false;
+    }
+    // PandaSpigot end
+
     public void a(World world) {
         this.a = world;
     }
 
     public void a(int i) {
+        if(!this.isVillageAreaLoaded()) return; // PandaSpigot - avoid loading chunks
         this.g = i;
         this.m();
         this.l();
@@ -341,6 +365,7 @@ public class Village {
 
             this.e = Math.max(32, (int) Math.sqrt((double) j) + 1);
         }
+        this.calculateNewCheckPositions(); // PandaSpigot
     }
 
     public int a(String s) {
@@ -395,6 +420,7 @@ public class Village {
                 this.j.put(nbttagcompound2.getString("Name"), Integer.valueOf(nbttagcompound2.getInt("S")));
             }
         }
+        this.calculateNewCheckPositions(); // PandaSpigot
 
     }
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 66b6a53c1938c7e018553c728fa2db82cf3dd8ac..9416c32bf7a93ce02812b0d94d9f68d07436ba64 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -939,7 +939,10 @@ public abstract class World implements IBlockAccess {
                 int i1 = MathHelper.floor(vec3d.b);
                 int j1 = MathHelper.floor(vec3d.c);
                 BlockPosition blockposition = new BlockPosition(l, i1, j1);
-                IBlockData iblockdata = this.getType(blockposition);
+                // PandaSpigot start - avoid loading chunks
+                IBlockData iblockdata = this.getTypeIfLoaded(blockposition);
+                if (iblockdata == null) return null;
+                // PandaSpigot end
                 Block block = iblockdata.getBlock();
 
                 if ((!flag1 || block.a(this, blockposition, iblockdata) != null) && block.a(iblockdata, flag)) {
@@ -1041,7 +1044,10 @@ public abstract class World implements IBlockAccess {
                     i1 = MathHelper.floor(vec3d.b) - (enumdirection == EnumDirection.UP ? 1 : 0);
                     j1 = MathHelper.floor(vec3d.c) - (enumdirection == EnumDirection.SOUTH ? 1 : 0);
                     blockposition = new BlockPosition(l, i1, j1);
-                    IBlockData iblockdata1 = this.getType(blockposition);
+                    // PandaSpigot start - ray tracing into an unloaded chunk should be treated as a miss, this saves a ton of lag for when AI tries to raytrace near unloaded chunks.
+                    IBlockData iblockdata1 = this.getTypeIfLoaded(blockposition);
+                    if (iblockdata1 == null) return null;
+                    // PandaSpigot end
                     Block block1 = iblockdata1.getBlock();
 
                     if (!flag1 || block1.a(this, blockposition, iblockdata1) != null) {
@@ -2780,8 +2786,11 @@ public abstract class World implements IBlockAccess {
 
         for (int i1 = i; i1 <= j; ++i1) {
             for (int j1 = k; j1 <= l; ++j1) {
-                if (this.isChunkLoaded(i1, j1, true)) {
-                    this.getChunkAt(i1, j1).a(entity, axisalignedbb, arraylist, predicate);
+                // PandaSpigot start - Use getChunkIfLoaded
+                Chunk chunk = this.getChunkIfLoaded(i1, j1);
+                if(chunk != null) {
+                    chunk.a(entity, axisalignedbb, arraylist, predicate);
+                // PandaSpigot end
                 }
             }
         }
