From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mechoriet <kevinworm92@gmail.com>
Date: Sat, 14 Oct 2023 22:47:19 +0200
Subject: [PATCH] temp


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 37aae0ccb40e1827f268a88b1a74d288e3f5760d..f7087e3d0dae1c9f3653b4d5039de8403304db98 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -437,11 +437,9 @@ public abstract class Entity implements ICommandListener {
      * PaperSpigot - Load surrounding chunks the entity is moving through
      */
     public void loadChunks() {
-        for (int cx = (int) locX >> 4; cx <= (int) (locX + motX) >> 4; ++cx) {
-            for (int cz = (int) locZ >> 4; cz <= (int) (locZ + motZ) >> 4; ++cz) {
-                ((ChunkProviderServer) world.chunkProvider).getChunkAt(cx, cz);
-            }
-        }
+        int chunkX = org.bukkit.util.NumberConversions.floor(locX) >> 4;
+        int chunkZ = org.bukkit.util.NumberConversions.floor(locZ) >> 4;
+       ((ChunkProviderServer) world.chunkProvider).getChunkAt(chunkX, chunkZ);
     }
 
 
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index 599b496acfd7ba727a4948ff18ada7614bb74e08..aab8252468afee9ebe3684f37291749699d4de86 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -129,7 +129,8 @@ public abstract class World implements IBlockAccess {
 
     // Spigot start
     private boolean guardEntityList;
-    protected final gnu.trove.map.hash.TLongShortHashMap chunkTickList;
+//    protected final gnu.trove.map.hash.TLongShortHashMap chunkTickList;
+    protected final it.unimi.dsi.fastutil.longs.Long2ShortOpenHashMap chunkTickList;
     protected float growthOdds = 100;
     protected float modifiedOdds = 100;
     private final byte chunkTickRadius;
@@ -196,8 +197,7 @@ public abstract class World implements IBlockAccess {
         // CraftBukkit end
         // Spigot start
         this.chunkTickRadius = (byte) ( ( this.getServer().getViewDistance() < 7 ) ? this.getServer().getViewDistance() : 7 );
-        this.chunkTickList = new gnu.trove.map.hash.TLongShortHashMap( spigotConfig.chunksPerTick * 5, 0.7f, Long.MIN_VALUE, Short.MIN_VALUE );
-        this.chunkTickList.setAutoCompactionFactor( 0 );
+        this.chunkTickList = new it.unimi.dsi.fastutil.longs.Long2ShortOpenHashMap(spigotConfig.chunksPerTick * 5,0.7f);
         // Spigot end
 
         this.L = this.random.nextInt(12000);
@@ -1273,7 +1273,7 @@ public abstract class World implements IBlockAccess {
     }
 
     public List<AxisAlignedBB> getCubes(Entity entity, AxisAlignedBB axisalignedbb) {
-        ArrayList arraylist = Lists.newArrayList();
+        List<AxisAlignedBB> arraylist = new it.unimi.dsi.fastutil.objects.ObjectArrayList<>(); // PandaSpigot - ArrayList -> ObjectArrayList
         int i = MathHelper.floor(axisalignedbb.a);
         int j = MathHelper.floor(axisalignedbb.d + 1.0D);
         int k = MathHelper.floor(axisalignedbb.b);
@@ -1283,8 +1283,6 @@ public abstract class World implements IBlockAccess {
         WorldBorder worldborder = this.getWorldBorder();
         boolean flag = entity.aT();
         boolean flag1 = this.a(worldborder, entity);
-        IBlockData iblockdata = Blocks.STONE.getBlockData();
-        BlockPosition.MutableBlockPosition blockposition_mutableblockposition = new BlockPosition.MutableBlockPosition();
 
         // Spigot start
         int ystart = ( ( k - 1 ) < 0 ) ? 0 : ( k - 1 );
@@ -2363,7 +2361,7 @@ public abstract class World implements IBlockAccess {
                 int dx = ( random.nextBoolean() ? 1 : -1 ) * random.nextInt( randRange );
                 int dz = ( random.nextBoolean() ? 1 : -1 ) * random.nextInt( randRange );
                 long hash = chunkToKey( dx + j, dz + k );
-                if ( !chunkTickList.contains( hash ) && this.chunkProvider.isChunkLoaded(dx + j, dz + k ) )
+                if ( !chunkTickList.containsKey( hash ) && this.chunkProvider.isChunkLoaded(dx + j, dz + k ) )
                 {
                     chunkTickList.put( hash, (short) -1 ); // no players
                 }
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index d68deb81f9f7dfb82591d5876daaac9a3a258dc6..20ea81dea87bf75e1426cd60618f2d4c19c2a5cf 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -13,6 +13,10 @@ import java.util.Random;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.UUID;
+
+import it.unimi.dsi.fastutil.longs.Long2ShortMap;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.shorts.ShortIterator;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -377,11 +381,10 @@ public class WorldServer extends World implements IAsyncTaskHandler {
         super.h();
         if (this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
             // Spigot start
-           gnu.trove.iterator.TLongShortIterator iterator = this.chunkTickList.iterator();
+           ObjectIterator<Long2ShortMap.Entry> iterator = this.chunkTickList.long2ShortEntrySet().fastIterator();
 
             while (iterator.hasNext()) {
-                iterator.advance();
-                long chunkCoord = iterator.key();
+                long chunkCoord = iterator.next().getLongKey();
 
                 this.getChunkAt(World.keyToX( chunkCoord ), World.keyToZ( chunkCoord )).b(false);
                 // Spigot end
@@ -397,16 +400,16 @@ public class WorldServer extends World implements IAsyncTaskHandler {
             //    int k = chunkcoordintpair1.x * 16;
             //    int l = chunkcoordintpair1.z * 16;
             // Spigot start
-            for (gnu.trove.iterator.TLongShortIterator iter = chunkTickList.iterator(); iter.hasNext(); )
-            {
-                iter.advance();
-                long chunkCoord = iter.key();
+            ObjectIterator<Long2ShortMap.Entry> iterator = this.chunkTickList.long2ShortEntrySet().iterator();
+            while (iterator.hasNext()) {
+                Long2ShortMap.Entry entry = iterator.next();
+                long chunkCoord = entry.getLongKey();
                 int chunkX = World.keyToX( chunkCoord );
                 int chunkZ = World.keyToZ( chunkCoord );
                 // If unloaded, or in procedd of being unloaded, drop it
                 if ( ( !this.chunkProvider.isChunkLoaded( chunkX, chunkZ ) ) || ( this.chunkProviderServer.unloadQueue.contains( chunkX, chunkZ ) ) )
                 {
-                    iter.remove();
+                    iterator.remove();
                     continue;
                 }
                 // Spigot end
