From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: mechoriet <kevinworm92@gmail.com>
Date: Fri, 17 Jun 2022 18:35:40 +0200
Subject: [PATCH] Add World Util Methods

Co-authored-by: uRyanxD <familiarodrigues123ro@gmail.com>

Methods that can be used for other patches to help improve logic.

diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
index 03fe76355813497a5db33ad185db0e4b40c6f85a..df28cca6175ff3ddf4992c44a0760ef17310b03e 100644
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -695,6 +695,7 @@ public class Chunk {
 
     }
 
+    public final int getLightSubtracted(BlockPosition blockposition, int i) { return this.a(blockposition, i); } // PandaSpigot - OBFHELPER
     public int a(BlockPosition blockposition, int i) {
         int j = blockposition.getX() & 15;
         int k = blockposition.getY();
diff --git a/src/main/java/net/minecraft/server/IChunkProvider.java b/src/main/java/net/minecraft/server/IChunkProvider.java
index c68ffe0e040f239f093a4543bc07463b27f96228..f6647ccdafd4ce9b91b94f4862b02bea870a07f8 100644
--- a/src/main/java/net/minecraft/server/IChunkProvider.java
+++ b/src/main/java/net/minecraft/server/IChunkProvider.java
@@ -10,6 +10,12 @@ public interface IChunkProvider {
 
     Chunk getChunkAt(BlockPosition blockposition);
 
+    default Chunk getChunkIfLoaded(int i, int j) {
+        if (!this.isChunkLoaded(i, j)) {
+            return null;
+        }
+        return this.getOrCreateChunk(i, j);
+    }
     void getChunkAt(IChunkProvider ichunkprovider, int i, int j);
 
     boolean a(IChunkProvider ichunkprovider, Chunk chunk, int i, int j);
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index b02fed45319485f39d370d7be7fc3daac06fb9cd..02f751f27492a8d39784f56c7cb2aba9f2c62b5d 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -93,7 +93,7 @@ public abstract class World implements IBlockAccess {
     public final boolean isClientSide;
     // CraftBukkit - longhashset
     // protected LongHashSet chunkTickList = new LongHashSet(); // Spigot
-    private int L;
+    private int L; private int getSkylightSubtracted() { return this.L; } // PandaSpigot - OBFHELPER
     public boolean allowMonsters; // CraftBukkit - public
     public boolean allowAnimals; // CraftBukkit - public
     private boolean M;
@@ -175,6 +175,12 @@ public abstract class World implements IBlockAccess {
         return (CraftServer) Bukkit.getServer();
     }
 
+    // PandaSpigot start
+    public Chunk getChunkIfLoaded(BlockPosition position) {
+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(position.getX() >> 4, position.getZ() >> 4);
+    }
+    // PandaSpigot end
+
     public Chunk getChunkIfLoaded(int x, int z) {
         return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
     }
@@ -297,7 +303,12 @@ public abstract class World implements IBlockAccess {
         return this.getType(blockposition).getBlock().getMaterial() == Material.AIR;
     }
 
+    // PandaSpigot start - xyz version of isLoaded
+    public boolean isLoaded(int x, int y, int z) {
+        return getChunkIfLoaded(x >> 4, z >> 4) != null;
+    }
     public boolean isLoaded(BlockPosition blockposition) {
+    // PandaSpigot stop
         return getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4) != null; // PandaSpigot
     }
 
@@ -362,25 +373,89 @@ public abstract class World implements IBlockAccess {
         return this.chunkProvider.getOrCreateChunk(i, j);
     }
 
-    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+    private void setCapturedBlockType(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        BlockState blockstate = null;
+        Iterator<BlockState> it = capturedBlockStates.iterator();
+        while (it.hasNext()) {
+            BlockState previous = it.next();
+            if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                blockstate = previous;
+                it.remove();
+                break;
+            }
+        }
+        if (blockstate == null) {
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+        }
+        blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
+        blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+        this.capturedBlockStates.add(blockstate);
+    }
+
+    public boolean setTypeAndDataIfLoaded(BlockPosition blockposition, IBlockData iblockdata, int i) {
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
-            BlockState blockstate = null;
-            Iterator<BlockState> it = capturedBlockStates.iterator();
-            while (it.hasNext()) {
-                BlockState previous = it.next();
-                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
-                    blockstate = previous;
-                    it.remove();
-                    break;
-                }
-            }
-            if (blockstate == null) {
-                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
-            }
-            blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
-            blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+            this.setCapturedBlockType(blockposition, iblockdata, i);
+            return true;
+        }
+        // CraftBukkit end
+        int x = blockposition.getX();
+        int y = blockposition.getY();
+        int z = blockposition.getZ();
+        Chunk chunk = this.getChunkIfLoaded(x >> 4, z >> 4);
+        if (chunk == null) {
+            return false;
+        }
+
+        if (!this.isValidLocation(x, y, z)) {
+            return false;
+        }
+
+        if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
+            return false;
+        }
+
+        Block block = iblockdata.getBlock();
+
+        // CraftBukkit start - capture blockstates
+        BlockState blockstate = null;
+        if (this.captureBlockStates) {
+            blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, x, y, z, i);
             this.capturedBlockStates.add(blockstate);
+        }
+        IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
+
+        if (iblockdata1 == null) {
+            // CraftBukkit start - remove blockstate if failed
+            if (this.captureBlockStates) {
+                this.capturedBlockStates.remove(blockstate);
+            }
+            // CraftBukkit end
+            return false;
+        }
+        Block block1 = iblockdata1.getBlock();
+
+        if (block.p() != block1.p() || block.r() != block1.r()) {
+            this.methodProfiler.a("checkLight");
+            this.x(blockposition);
+            this.methodProfiler.b();
+        }
+
+        // CraftBukkit start
+        if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+            // Modularize client and physic updates
+            notifyAndUpdatePhysics(blockposition, chunk, block1, block, i);
+        }
+        // CraftBukkit end
+
+        return true;
+    }
+    // Titanium end
+
+    public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            this.setCapturedBlockType(blockposition, iblockdata, i); // Titanium
             return true;
         }
         // CraftBukkit end
@@ -652,10 +727,46 @@ public abstract class World implements IBlockAccess {
         }
     }
 
+    // PandaSpigot start - test if meets light level, return faster
+    // logic copied from below
+    public boolean isLightLevel(BlockPosition blockposition, int level) {
+        if (isValidLocation(blockposition)) {
+            if (this.getType(blockposition).getBlock().s()) {
+                if (this.c(blockposition.up(), false) >= level) {
+                    return true;
+                }
+                if (this.c(blockposition.east(), false) >= level) {
+                    return true;
+                }
+                if (this.c(blockposition.west(), false) >= level) {
+                    return true;
+                }
+                if (this.c(blockposition.south(), false) >= level) {
+                    return true;
+                }
+                if (this.c(blockposition.north(), false) >= level) {
+                    return true;
+                }
+                return false;
+            } else {
+                if (blockposition.getY() >= 256) {
+                    blockposition = new BlockPosition(blockposition.getX(), 255, blockposition.getZ());
+                }
+
+                Chunk chunk = this.getChunkAtWorldCoords(blockposition);
+                return chunk.getLightSubtracted(blockposition, this.getSkylightSubtracted()) >= level;
+            }
+        } else {
+            return true;
+        }
+    }
+    // PandaSpigot end
+
     public int getLightLevel(BlockPosition blockposition) {
         return this.c(blockposition, true);
     }
 
+    public final int getLight(BlockPosition blockposition, boolean checkNeighbors) { return this.c(blockposition, checkNeighbors); } // PandaSpigot - OBFHELPER
     public int c(BlockPosition blockposition, boolean flag) {
         if (blockposition.getX() >= -30000000 && blockposition.getZ() >= -30000000 && blockposition.getX() < 30000000 && blockposition.getZ() < 30000000) {
             if (flag && this.getType(blockposition).getBlock().s()) {
@@ -766,6 +877,22 @@ public abstract class World implements IBlockAccess {
         return this.worldProvider.p()[this.getLightLevel(blockposition)];
     }
 
+    // PandaSpigot start - Add getTypeIfLoaded
+    public IBlockData getTypeIfLoaded(BlockPosition blockposition) {
+        if (this.captureTreeGeneration) {
+            for (BlockState previous : this.capturedBlockStates) {
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
+                }
+            }
+        }
+        Chunk chunk = this.getChunkIfLoaded(blockposition);
+        if (chunk != null) {
+            return this.isValidLocation(blockposition) ? chunk.getBlockData(blockposition) : Blocks.AIR.getBlockData();
+        }
+        return null;
+    }
+    // PandaSpigot end
     // Spigot start
     public IBlockData getType(BlockPosition blockposition)
     {
